<%@ page pageEncoding="utf-8"%><%@ taglib prefix="c" uri="http://java.sun.com/jstl/core_rt"%><%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt"%><%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions"%><!--[if IE 8]> <html lang="en" class="ie8 no-js"> <![endif]--><!--[if IE 9]> <html lang="en" class="ie9 no-js"> <![endif]--><!-- BEGIN HEAD --><%@ include file="../common/global.jsp"%><head><meta charset="utf-8" /><meta content="width=device-width, initial-scale=1.0" name="viewport" /><%@ include file="../common/head-content.jsp"%><link href="<%=staticPath%>/css/lucence.css" rel="stylesheet"	type="text/css" /></head><!-- END HEAD --><!-- BEGIN BODY --><body>	<%@ include file="../common/header.jsp"%>	<div id="content">				<div class="container">			<div class="page-header margin-top-large padding-middle">				<h1>					Kalor搜索索引管理 <small>lucence索引管理系统</small>				</h1>			</div>					<div class="row">				<div class="span2 bs-docs-sidebar">					<ul class="nav nav-list bs-docs-sidenav affix-top">						<li><a href="#overview"><i class="icon-chevron-right"></i>								概览</a></li>						<li><a href="#transitions"><i class="icon-chevron-right"></i>								过渡效果</a></li>						<li><a href="#modals"><i class="icon-chevron-right"></i>								模态对话框</a></li>						<li><a href="#dropdowns"><i class="icon-chevron-right"></i>								下拉菜单</a></li>						<li><a href="#scrollspy"><i class="icon-chevron-right"></i>								滚动监听</a></li>					</ul>				</div>				<div class="span10 margin-top-middle">					<!-- Overview        ================================================== -->					<section id="overview">						<div class="page-header">							<h1>Bootstrap中的JavaScript</h1>						</div>						<h3>引入单个插件还是一次性引入所有插件</h3>						<p>							每个插件都可以单独的引入到页面中（注意插件间的依赖关系），或者一次性引入。<strong>bootstrap.js</strong>							和<strong>bootstrap.min.js</strong>							文件都将所有插件包含在一个文件中了（前者是未压缩版，后者是压缩版）。						</p>						<h3>Data 属性</h3>						<p>你可以仅仅通过data属性API就能使用所有Bootstrap中的插件，而且不用写一行JavaScript代码。这是Bootstrap中的一等API，并且是你的首选方式。</p>						<p>特殊情况是，在某些情况下可能需要特意禁用这种默认动作。因此，我们特地提供了禁用data属性API的方式，通过解除绑定在body上的被命名为`'data-api'`的事件即可实现。如下所示：						</p>						<pre class="prettyprint linenums">							<ol class="linenums">								<li class="L0"><span class="pln">$</span><span class="pun">(</span><span									class="str">'body'</span><span class="pun">).</span><span									class="pln">off</span><span class="pun">(</span><span									class="str">'.data-api'</span><span class="pun">)</span></li>							</ol>						</pre>						<p>还可以解除特定插件的事件绑定，只要将插件名和data-api链接在一起作为参数使用。如下所示：</p>						<pre class="prettyprint linenums">							<ol class="linenums">								<li class="L0"><span class="pln">$</span><span class="pun">(</span><span									class="str">'body'</span><span class="pun">).</span><span									class="pln">off</span><span class="pun">(</span><span									class="str">'.alert.data-api'</span><span class="pun">)</span></li>							</ol>						</pre>						<h3>编程API</h3>						<p>我们同时为所有Bootstrap插件提供了JavaScript							API。所有公开的API都可以单独或链式调用，均返回其所操作的集合（和jQuery的API一致）。</p>						<pre class="prettyprint linenums">							<ol class="linenums">								<li class="L0"><span class="pln">$</span><span class="pun">(</span><span									class="str">".btn.danger"</span><span class="pun">).</span><span									class="pln">button</span><span class="pun">(</span><span									class="str">"toggle"</span><span class="pun">).</span><span									class="pln">addClass</span><span class="pun">(</span><span									class="str">"fat"</span><span class="pun">)</span></li>							</ol>						</pre>						<p>所有方法均可接受一个可选的参数对象、一个对此方法有特定意义的字符串或者什么也不传（即用默认参数初始化此插件）：</p>						<pre class="prettyprint linenums">							<ol class="linenums">								<li class="L0"><span class="pln">$</span><span class="pun">(</span><span									class="str">"#myModal"</span><span class="pun">).</span><span									class="pln">modal</span><span class="pun">()</span><span									class="pln">                       </span><span class="com">// initialized with defaults</span></li>								<li class="L1"><span class="pln">$</span><span class="pun">(</span><span									class="str">"#myModal"</span><span class="pun">).</span><span									class="pln">modal</span><span class="pun">({</span><span									class="pln"> keyboard</span><span class="pun">:</span><span									class="pln"> </span><span class="kwd">false</span><span									class="pln"> </span><span class="pun">})</span><span									class="pln">   </span><span class="com">// initialized with no keyboard</span></li>								<li class="L2"><span class="pln">$</span><span class="pun">(</span><span									class="str">"#myModal"</span><span class="pun">).</span><span									class="pln">modal</span><span class="pun">(</span><span									class="str">'show'</span><span class="pun">)</span><span									class="pln">                </span><span class="com">// initializes and invokes show immediately</span>								<p></p></li>							</ol>						</pre>						<p>							每个插件都通过`Constructor` 属性暴露了其原始的构造函数：							<code>$.fn.popover.Constructor</code>							。如果你想获得某个特定插件的实例，可以直接从页面元素中获取：							<code>$('[rel=popover]').data('popover')</code>							.						</p>						<h3>避免冲突</h3>						<p>							如果你需要将Bootstrap插件和其它UI框架一同使用。在这种情况下，随时都会导致命名空间冲突。如果这种情况发生了，你可以通过调用插件的							<code>.noConflict</code>							函数恢复其原始值。						</p>						<pre class="prettyprint linenums">							<ol class="linenums">								<li class="L0"><span class="kwd">var</span><span									class="pln"> bootstrapButton </span><span class="pun">=</span><span									class="pln"> $</span><span class="pun">.</span><span									class="pln">fn</span><span class="pun">.</span><span									class="pln">button</span><span class="pun">.</span><span									class="pln">noConflict</span><span class="pun">()</span><span									class="pln"> </span><span class="com">// return $.fn.button to previously assigned value</span></li>								<li class="L1"><span class="pln">$</span><span class="pun">.</span><span									class="pln">fn</span><span class="pun">.</span><span									class="pln">bootstrapBtn </span><span class="pun">=</span><span									class="pln"> bootstrapButton            </span><span									class="com">// give $().bootstrapBtn the bootstrap functionality</span></li>							</ol>						</pre>						<h3>事件</h3>						<p>							Bootstrap对多数插件的独有行为提供了自定义事件。 一般而言，这些事件都是以（英语）动词的原型和过去分词形式来表示的 -							动词原形形式的(例如：							<code>show</code>							) 在事件执行之前触发；过去分词形式的(例如：							<code>shown</code>							) 在动作执行完毕后触发。						</p>						<p>所有动词原形形式的事件都提供了preventDefault函数。这能在动作执行之前使其停止。</p>						<pre class="prettyprint linenums">							<ol class="linenums">								<li class="L0"><span class="pln">$</span><span class="pun">(</span><span									class="str">'#myModal'</span><span class="pun">).</span><span									class="pln">on</span><span class="pun">(</span><span									class="str">'show'</span><span class="pun">,</span><span									class="pln"> </span><span class="kwd">function</span><span									class="pln"> </span><span class="pun">(</span><span class="pln">e</span><span									class="pun">)</span><span class="pln"> </span><span class="pun">{</span></li>								<li class="L1"><span class="pln">    </span><span									class="kwd">if</span><span class="pln"> </span><span									class="pun">(!</span><span class="pln">data</span><span									class="pun">)</span><span class="pln"> </span><span class="kwd">return</span><span									class="pln"> e</span><span class="pun">.</span><span									class="pln">preventDefault</span><span class="pun">()</span><span									class="pln"> </span><span class="com">// stops modal from being shown</span></li>								<li class="L2"><span class="pun">})</span></li>							</ol>						</pre>					</section>					<!-- Transitions        ================================================== -->					<section id="transitions">						<div class="page-header">							<h1>								过渡效果 <small>bootstrap-transition.js</small>							</h1>						</div>						<h3>关于过渡效果</h3>						<p>							对于简单的过度效果，只要在引入其它JS文件时一同引入<strong>bootstrap-transition.js</strong>文件即可。如果你引入的是编译（或压缩）之后的<strong>bootstrap.js</strong>文件，就不再需要引入此文件了，因为<strong>bootstrap.js</strong>文件已经包含了此插件。						</p>						<h3>使用案例</h3>						<p>过渡效果插件的使用案例：</p>						<ul>							<li>具有幻灯片或淡入效果的对话框</li>							<li>具有淡出效果的标签页</li>							<li>具有淡出效果的警告框</li>							<li>具有幻灯片效果的轮播板</li>						</ul>					</section>				</div>			</div>		</div>	</div>	<!-- 底部 -->	<%@ include file="../common/bottom.jsp"%>	<script src="<%=staticPath%>/js/goTop.js<%=version%>"		type="text/javascript"></script>	<script type="text/javascript">		$(function() {	        // side bar	        setTimeout(function() {		        $('.bs-docs-sidenav').affix({			        offset: {			            top: 100,			            bottom: 100			        }		        })	        }, 100)        });	</script></body></html>